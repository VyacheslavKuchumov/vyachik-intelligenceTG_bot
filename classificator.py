import pandas as pd
import matplotlib.pyplot as plt
from hh_ru_api import ApiHhRu
from pprint import pprint

from SECRET import HH_RU_TOKEN
api = ApiHhRu(token=HH_RU_TOKEN, areas=[])
data_from_api = api.fetch_professional_roles()

grouped_roles = {}
for category in data_from_api:
    category_name = category['name']  # Example: 'Автомобильный бизнес'
    if category_name not in grouped_roles:
        grouped_roles[category_name] = []

    # Extract role names
    for role in category['roles']:
        role_name = role['name']
        grouped_roles[category_name].append(role_name)

# # Output the formatted dictionary
# pprint(grouped_roles)


all_data = pd.read_csv('all_jobs.csv')

df = pd.DataFrame(all_data)


# # Словарь с ключевыми словами для классификации по группам
#
# group_keywords = {
#     "IT и технологии": [
#         "программист", "разработчик", "системный", "инженер", "data", "дата",
#         "devops", "техподдержка", "системный администратор", "сетевой инженер",
#         "технический писатель", "системный аналитик", "специалист по информационной безопасности",
#         "специалист технической поддержки", "дата-сайентист", "bi-аналитик",
#         "специалист по сертификации", "продуктовый аналитик", "тестировщик"
#     ],
#     "Медицина и фармацевтика": [
#         "врач", "медицинский", "ветеринар", "ассистент врача", "фармацевт",
#         "медпредставитель", "главный врач", "заведующий отделением", "медицинская сестра",
#         "медицинский брат", "фармацевт-провизор", "лаборант", "косметолог"
#     ],
#     "Финансы и бухгалтерия": [
#         "бухгалтер", "финансовый", "аудитор", "казначей", "кредитный",
#         "аналитик", "инвестиционный", "финансовый контролер", "финансовый менеджер",
#         "финансовый аналитик", "комплаенс-менеджер", "андеррайтер", "казначей",
#         "финансовый директор (cfo)", "экономист", "брокер", "бизнес-тренер"
#     ],
#     "Менеджмент и руководство": [
#         "директор", "руководитель", "начальник", "менеджер", "управляющий",
#         "координатор", "генеральный директор", "исполнительный директор (ceo)",
#         "директор по информационным технологиям (cio)", "руководитель отдела",
#         "менеджер по персоналу", "менеджер продукта", "менеджер/консультант по стратегии",
#         "арт-директор", "креативный директор", "руководитель проектов",
#         "начальник смены", "директор юридического департамента (clo)",
#         "коммерческий директор (cco)", "операционный директор (coo)",
#         "директор по маркетингу и pr (cmo)", "директор по персоналу (hrd)"
#     ],
#     "Связь с общественностью": [
#         "pr", "маркетинг", "контент", "smm", "журналист", "редактор",
#         "копирайтер", "психолог", "маркетолог-аналитик", "руководитель отдела маркетинга",
#         "копирайтер, редактор", "smm-менеджер", "журналист, корреспондент",
#         "event-менеджер", "продюсер", "контент-менеджер"
#     ],
#     "Производство и строительство": [
#         "инженер", "строитель", "архитектор", "маляр, штукатур", "монтажник", "оператор станков с чпу", "сварщик", "слесарь", "токарь",
#         "механик", "мастер", "инженер-конструктор", "инженер-проектировщик",
#         "инженер по качеству", "инженер-энергетик", "инженер-электрик",
#         "инженер по охране труда", "прораб", "мастер смр", "мастер по ремонту",
#         "инженер по эксплуатации", "технолог", "инженер пто", "инженер-сметчик",
#         "инженер-электроник", "инженер-электронщик", "контролёр отк"
#     ],
#     "Торговля": [
#         "продавец", "кассир", "мерчандайзер", "агент", "менеджер по продажам",
#         "оценщик", "товаровед", "агент по недвижимости", "торговый представитель",
#         "продавец-консультант", "продавец-кассир", "заведующий аптекой",
#         "директор магазина", "директор сети магазинов", "администратор магазина",
#         "администратор торгового зала"
#     ],
#     "Образование и наука": [
#         "учитель", "преподаватель", "исследователь", "методист", "метролог",
#         "научный специалист", "методолог", "учитель, преподаватель, педагог",
#         "воспитатель", "няня", "научный специалист, исследователь"
#     ],
#     "Общественный сектор": [
#         "охранник", "полицейский", "уборщик", "водитель", "военнослужащий",
#         "дворник", "специалист по кадрам", "специалист службы безопасности",
#         "курьер", "диспетчер", "машинист", "грузчик", "автослесарь", "автомеханик",
#         "оператор call-центра", "специалист контактного центра", "упаковщик",
#         "комплектовщик", "оператор пк", "архивариус"
#     ],
#     "Искусство и культура": [
#         "артист", "актер", "аниматор", "фотограф", "ретушер", "дизайнер",
#         "художник", "режиссер", "сценарист", "мастер ногтевого сервиса",
#         "парикмахер", "массажист", "визажист", "стилист", "видеооператор",
#         "видеомонтажер", "режиссер", "сценарист",
#     ],
#     "Гостиничный и ресторанный бизнес": [
#         "менеджер ресторана", "официант", "бармен", "бариста", "повар",
#         "пекарь", "кондитер", "хостес", "администратор"
#     ],
#     "Логистика и транспорт": [
#             "менеджер по логистике", "менеджер по вэд", "начальник склада",
#             "координатор отдела продаж", "оператор производственной линии",
#             "специалист по тендерам", "специалист по взысканию задолженности",
#             "руководитель отдела логистики"
#     ],
#     "Агропромышленность и экология": [
#             "агроном", "зоотехник", "геолог", "инженер-эколог", "специалист по охране труда"
#     ]
# }
# Функция для определения группы на основе ключевых слов
def classify_job(professional_role):
    for group, keywords in grouped_roles.items():
        if any(keyword.lower() in professional_role.lower() for keyword in keywords):
            return group
    return "Другое"





# df["job_group"] = df["professional_roles_name"].apply(classify_job)
#
# df.to_csv("catigorized_jobs_hh_ru.csv")






profiles = {
    "информатика и вычислительная техника (09.03.01)": [
        "программист, разработчик",
        "сетевой инженер",
        "системный инженер",
        "тестировщик",
        "devops-инженер",
        "системный аналитик",
        "аналитик данных (bi-аналитик)",
        "специалист технической поддержки"
    ],
    "информационные системы и технологии (09.03.02)": [
        "специалист по управлению проектами",
        "разработчик информационных систем",
        "системный аналитик",
        "бизнес-аналитик",
        "консультант по информационным системам",
        "администратор баз данных",
        "аналитик данных (bi-аналитик)"
    ],
    "прикладная информатика (09.03.03)": [
        "программист прикладного по",
        "специалист по бизнес-приложениям",
        "разработчик веб-приложений",
        "дата-сайентист",
        "ui/ux дизайнер"
    ],
    "программная инженерия (09.03.04)": [
        "программист, разработчик",
        "системный архитектор",
        "qa-инженер (тестировщик)",
        "менеджер проектов",
        "devops-инженер",
        "инженер по кибербезопасности"
    ],
    "информационная безопасность (10.03.01)": [
        "специалист по информационной безопасности",
        "аналитик по кибербезопасности",
        "инженер по безопасности систем"
    ],
    "математика и компьютерные науки (02.03.01)": [
        "математик, аналитик данных",
        "специалист по машинному обучению",
        "системный аналитик"
    ]
}


def classify_profile(professional_role):
    for group, keywords in profiles.items():
        if any(keyword.lower() in professional_role.lower() for keyword in keywords):
            return group
    return "Другое"

df["profile"] = df["professional_roles_name"].apply(classify_profile)

df.to_csv("catigorized_profiles_it.csv")

# print(df["profile"].value_counts())